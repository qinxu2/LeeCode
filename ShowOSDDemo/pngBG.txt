	
	#include "cgdiplusbitmap.h"
#include <Gdiplus.h>
using namespace Gdiplus;
	
	
	Image *m_pImageClock1; 
	BLENDFUNCTION 	m_Blend;
 
	m_Blend.BlendOp=AC_SRC_OVER; //theonlyBlendOpdefinedinWindows2000    
	m_Blend.BlendFlags=0; //nothingelseisspecial...    
	m_Blend.AlphaFormat=AC_SRC_ALPHA; //...    
	m_Blend.SourceConstantAlpha=255;//AC_SRC_ALPHA    

	MyImageFromIDResource(IDB_PNG5,L"PNG",m_pImageClock1);   
	DWORD m_BakWidth  =m_pImageClock1->GetWidth();
	DWORD m_BakHeight =m_pImageClock1->GetHeight();
 
	::SetWindowPos(m_hWnd, HWND_TOPMOST,0,0,m_BakWidth,m_BakHeight,SWP_NOSIZE|SWP_NOMOVE);   
 
	HDC hdcTemp=GetDC()->m_hDC;
	HDC 	m_hdcMemory=CreateCompatibleDC(hdcTemp);
	HBITMAP hBitMap=CreateCompatibleBitmap(hdcTemp,m_BakWidth,m_BakHeight);
	SelectObject(m_hdcMemory,hBitMap);
     int Transparent=100;

	m_Blend.SourceConstantAlpha=int(Transparent*2.55);//1~255
	HDC hdcScreen=::GetDC (m_hWnd);
	RECT rct;
	GetWindowRect(&rct);
	POINT ptWinPos={rct.left,rct.top};
	Graphics graph(m_hdcMemory);

	Point points[] = { Point(0, 0), Point(m_BakWidth, 0), Point(0, m_BakHeight) };
	graph.DrawImage(m_pImageClock1, points, 3);
 
	SIZE sizeWindow={m_BakWidth,m_BakHeight};
	POINT ptSrc={0,0};
	DWORD dwExStyle=GetWindowLong(m_hWnd,GWL_EXSTYLE);
	if((dwExStyle&0x80000)!=0x80000)
		SetWindowLong(m_hWnd,GWL_EXSTYLE,dwExStyle^0x80000);

	BOOL bRet=FALSE;
	bRet= ::UpdateLayeredWindow( m_hWnd,hdcScreen,&ptWinPos,
		&sizeWindow,m_hdcMemory,&ptSrc,0,&m_Blend,2);
	graph.ReleaseHDC(m_hdcMemory);
	::ReleaseDC(m_hWnd,hdcScreen);
	hdcScreen=NULL;
	::ReleaseDC(m_hWnd,hdcTemp);
	hdcTemp=NULL;
	DeleteObject(hBitMap);
	DeleteDC(m_hdcMemory);
	m_hdcMemory=NULL;
 

	ModifyStyleEx (WS_EX_APPWINDOW,WS_EX_TOOLWINDOW );

// If you add a minimize button to your dialog, you will need the code below
//  to draw the icon.  For MFC applications using the document/view model,
//  this is automatically done for you by the framework.

BOOL Uninstall::MyImageFromIDResource(UINT nID, LPCTSTR sTR,Image * &pImg)   
{   
	HINSTANCE hInst = AfxGetResourceHandle();   
	HRSRC hRsrc = ::FindResource (hInst,MAKEINTRESOURCE(nID),sTR); // type    
	if (!hRsrc)   
		return FALSE;   

	// load resource into memory    
	DWORD len = SizeofResource(hInst, hRsrc);   
	BYTE* lpRsrc = (BYTE*)LoadResource(hInst, hRsrc);   
	if (!lpRsrc)   
		return FALSE;   

	// Allocate global memory on which to create stream    
	HGLOBAL m_hMem = GlobalAlloc(GMEM_FIXED, len);   
	BYTE* pmem = (BYTE*)GlobalLock(m_hMem);   
	memcpy(pmem,lpRsrc,len);   
	IStream* pstm;   
	CreateStreamOnHGlobal(m_hMem,FALSE,&pstm);   

	// load from stream    
	pImg=Gdiplus::Image::FromStream(pstm);   

	// free/release stuff    
	GlobalUnlock(m_hMem);   
	pstm->Release();   
	FreeResource(lpRsrc);   
    return TRUE;
} 
